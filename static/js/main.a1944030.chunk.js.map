{"version":3,"sources":["logo.svg","Header/Header.js","Square/Square.js","Row/Row.js","Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","className","src","logo","alt","Square","inputDisplay","row","id","split","column","type","onChange","e","handleInput","target","value","display","boards","solved","style","Row","squareValues","values","map","num","i","src_Square_Square","concat","toString","input","Card","unsolvedRows","board","rowNum","src_Row_Row","App","state","updatedBoard","solvedPuzzle","createBoardArr","initialArray","initialBoard","x","_this","setState","console","log","parseInt","prevState","puzzleSolvedHandler","puzzle","rec","y","v","j","push","Math","floor","filter","indexOf","valid","some","componentWillMount","_this2","this","src_Header_Header","src_Card_Card","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1944030.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport logo from '../logo.svg';\r\nimport './Header.css';\r\n\r\nconst Header = props => {        \r\n    return (\r\n        <div>\r\n            <header className=\"App-header\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                <div>Sudoku Solver</div>\r\n            </header>\r\n        </div>  \r\n    ); \r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Square.css';\r\n\r\nconst Square = props=> {   \r\n    //row coordinate is equal to first number and column coordinate is equal to second\r\n    const row = props.id.split(\"\")[0];\r\n    const column = props.id.split(\"\")[1];\r\n\r\n    //assign correct CSS upon solve button being pressed\r\n    // let correctInput;\r\n    let inputCSS = \"input-square\";\r\n    let squareBackground = {};\r\n    //checks original unsolved array to see if value is 0\r\n    let inputDisplay;\r\n    inputDisplay = <input type=\"text\" className={inputCSS} onChange={e=> props.handleInput([e.target.value, row, column])}></input>\r\n    let display = props.value > 0 && props.value <= 9 && props.boards.solved? props.value: inputDisplay;\r\n\r\n    return (\r\n        <td className=\"square\" style={display !== props.value? squareBackground:{}} id={props.id}>\r\n            {display}\r\n        </td>\r\n    );\r\n};\r\n\r\nexport default Square;","import React from 'react';\r\nimport Square from '../Square/Square';\r\nimport './Row.css';\r\n\r\nconst Row = props => {\r\n    const squareValues = props.values.map((num, i)=>{\r\n        return <Square id={`${props.row}${i.toString()}` }  boards={props.boards}  value={num} handleInput={input=>props.handleInput(input)}/>\r\n    });\r\n\r\n    return (\r\n        <tr className=\"board-row\">\r\n            {squareValues}\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default Row;","import React from 'react';\r\nimport Row from '../Row/Row';\r\nimport './Card.css';\r\n\r\nconst Card = props=> {\r\n    const {board} = props.boards;\r\n    const unsolvedRows = board.map((rowNum, i)=>{\r\n        return <Row row={i} values={rowNum} handleInput={input=>props.handleInput(input)} boards={props.boards}/>;\r\n    });\r\n    return (\r\n        <tbody>\r\n            {unsolvedRows}\r\n        </tbody>\r\n    );\r\n};\r\n\r\nexport default Card;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header/Header';\nimport Card from './Card/Card';\n\nclass App extends Component {\n  state = {\n    board: [],\n    updatedBoard: [],\n    //for displaying correct and incorrect inputs\n    solvedPuzzle: [],\n    solved: false\n  }\n\n  createBoardArr = () =>{\n    let emptyBoard = [[],[],[],[],[],[],[],[],[]];\n    let initialArray = [0,0,0,0,0,0,0,0,0];\n    let initialBoard = emptyBoard.map(x => [...initialArray]);\n    this.setState({\n      board: initialBoard,\n      updatedBoard: initialBoard\n    }, console.log(this.state));\n  }\n\n  //input is array equal to value, row, and column of number\n  handleInput = input=>{\n    const value = parseInt(input[0]);\n    const row = input[1];\n    const column = input[2];\n    this.setState(prevState=>{\n      const updatedBoard = prevState.updatedBoard;\n      updatedBoard[row][column] = value;\n      return updatedBoard;\n    });\n    console.log(this.state.updatedBoard);\n  }\n\n  puzzleSolvedHandler = () => {\n    let puzzle = this.state.updatedBoard;\n    const valid = (x, y) => {\n      var v = [];\n      for (var i = 0; i < 3; i++) {\n        for (var j = 0; j < 3; j++) {\n          v.push(puzzle[x][i * 3 + j])\n          v.push(puzzle[i * 3 + j][y])\n          v.push(puzzle[3 * Math.floor(x / 3) + i][3 * Math.floor(y / 3) + j])\n        }\n      }\n      return [1, 2, 3, 4, 5, 6, 7, 8, 9].filter(e => v.indexOf(e) === -1)\n    }\n    const rec = (x, y) => {\n      if (y === 9) {\n        this.setState({\n          solved: true,\n          updatedBoard: puzzle,\n          board: puzzle\n        }, () => console.log(this.state));\n        return puzzle;\n      } else if (!puzzle[x][y]) {\n        const correct = valid(x, y).some(i => {\n          puzzle[x][y] = i;\n          return rec((x + 1) % 9, y + (x === 9 ? 1 : 0))\n        })\n        if (correct)\n          return puzzle;\n        puzzle[x][y] = 0;\n      } else {\n        return rec((x + 1) % 9, y + (x === 8 ? 1 : 0))\n      }\n    }\n    return rec(0, 0)\n  }\n\n  componentWillMount = () =>{\n    this.createBoardArr();\n  }\n\n  render() {\n    const boards = {\n      board: this.state.board,\n      solved: this.state.solved\n    }\n    \n    return (\n      <div className=\"App\">\n        <Header/>      \n        <table className=\"board\">\n          <Card boards={boards} handleInput={input=>this.handleInput(input)}/>\n        </table>\n        <button onClick={this.puzzleSolvedHandler}>Solve Puzzle</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}